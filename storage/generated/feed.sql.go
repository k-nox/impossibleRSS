// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed.sql

package generated

import (
	"context"
	"database/sql"
)

const createFeed = `-- name: CreateFeed :exec
insert into feeds (url, title, description) values (?, ?, ?)
`

type CreateFeedParams struct {
	Url         string
	Title       sql.NullString
	Description sql.NullString
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) error {
	_, err := q.db.ExecContext(ctx, createFeed, arg.Url, arg.Title, arg.Description)
	return err
}

const createItem = `-- name: CreateItem :exec
insert into items (
    guid, title, authors, content, description, published_date, feed_url
) values (?, ?, ?, ?, ?, ?, ?)
`

type CreateItemParams struct {
	Guid          string
	Title         sql.NullString
	Authors       sql.NullString
	Content       sql.NullString
	Description   sql.NullString
	PublishedDate sql.NullTime
	FeedUrl       string
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) error {
	_, err := q.db.ExecContext(ctx, createItem,
		arg.Guid,
		arg.Title,
		arg.Authors,
		arg.Content,
		arg.Description,
		arg.PublishedDate,
		arg.FeedUrl,
	)
	return err
}

const getFeeds = `-- name: GetFeeds :many
select
    url,
    title,
    last_fetched_date,
    description
from feeds
`

func (q *Queries) GetFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.Url,
			&i.Title,
			&i.LastFetchedDate,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItemsForFeed = `-- name: GetItemsForFeed :many
select
    guid,
    title,
    authors,
    content,
    description,
    published_date
from items
where feed_url = ?
`

type GetItemsForFeedRow struct {
	Guid          string
	Title         sql.NullString
	Authors       sql.NullString
	Content       sql.NullString
	Description   sql.NullString
	PublishedDate sql.NullTime
}

func (q *Queries) GetItemsForFeed(ctx context.Context, feedUrl string) ([]GetItemsForFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getItemsForFeed, feedUrl)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemsForFeedRow
	for rows.Next() {
		var i GetItemsForFeedRow
		if err := rows.Scan(
			&i.Guid,
			&i.Title,
			&i.Authors,
			&i.Content,
			&i.Description,
			&i.PublishedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
